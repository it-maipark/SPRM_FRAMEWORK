@{
    ViewBag.Title = "Kanban";
}

<style>
    .avatar-stack {
        display: flex;
        margin-top: 12px;
    }

    .avatar-small {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: #007bff;
        color: white;
        font-size: 10px;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: -8px;
        border: 1px solid white;
        position: relative;
        cursor: default;
    }

    .avatar-small:first-child {
        margin-left: 0;
    }

    .avatar-small:hover::after {
        content: attr(data-name);
        position: absolute;
        top: 110%;
        left: 50%;
        transform: translateX(-50%);
        background: #333;
        color: white;
        padding: 4px 6px;
        border-radius: 4px;
        font-size: 10px;
        white-space: nowrap;
        z-index: 999;
    }

    .checklist-checkbox {
        width: 1.25rem;
        height: 1.25rem;
        margin-top: 0.3rem;
        margin-left: 0.5rem;
        cursor: pointer;
    }
</style>

<div class="page-navs bg-white py-3 pr-2">
    <div class="card-title fw-bold">Kanban</div>
</div>
<div class="page-inner page-inner-fill">
    <div id="myKanban" class="board">
        <div id="kanban-prft" class="kanban-board">
            <header class="kanban-board-header mb-3">
                <div class="kanban-title-board">Profitability</div>
            </header>
            <main></main>
        </div>
        <div id="kanban-stnb" class="kanban-board">
            <header class="kanban-board-header mb-3">
                <div class="kanban-title-board">Sustainability</div>
            </header>
            <main></main>
        </div>
        <div id="kanban-sdgs" class="kanban-board">
            <header class="kanban-board-header mb-3">
                <div class="kanban-title-board">Sustainable Development Goals</div>
            </header>
            <main></main>
        </div>
        <div id="kanban-hcr" class="kanban-board">
            <header class="kanban-board-header mb-3">
                <div class="kanban-title-board">Human Capital and Retention</div>
            </header>
            <main></main>
        </div>
        <div id="kanban-impv" class="kanban-board">
            <header class="kanban-board-header mb-3">
                <div class="kanban-title-board">Improvement</div>
            </header>
            <main></main>
        </div>
    </div>
</div>

<!-- Edit Kanban Modal -->
<div class="modal fade" id="editKanbanModal" aria-labelledby="editKanbanModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <form id="editKanbanValidation" enctype="multipart/form-data">
                <div class="modal-header">
                    <h2 class="modal-title font-weight-bold" id="editKanbanModalLabel">Kanban Details</h2>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="number" class="form-control" id="edit-ap-id" name="edit-ap-id" hidden>
                    <div class="form-group row">
                        <label class="col-12 font-weight-bold">To Do Checklist</label>
                    </div>
                    <div id="checklist-container"></div>
                    <div class="form-group row">
                        <div class="col-12">
                            <button type="button" class="btn btn-sm btn-success" id="btn-add-checklist">
                                <i class="fa fa-plus mr-2"></i>Add To Do Checklist
                            </button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Get from session
        var token = localStorage.getItem("AccessToken");
        var userMaipark = localStorage.getItem("Username");
        var userRole = localStorage.getItem("UserRole");
        var employeeData = localStorage.getItem("employeeData");

        if (userRole) {
            var roleObj = JSON.parse(userRole);
            var roleName = roleObj.roleName;
        }

        if (employeeData) {
            var employeeDataObj = JSON.parse(employeeData);
        }

        // Define Checklist Data
        let initialChecklistData = []

        $(document).ready(function () {
            $('#navLink-3').addClass('nav-item active');
            loadKanbanData();

            $('#myKanban').on('click', '.btn-edit-kanban', e => {
                const btn = e.currentTarget.dataset;
                $('#edit-ap-id').val(btn.apid);

                const checklist = JSON.parse(btn.checklist || '[]');
                initialChecklistData = checklist;

                $('#checklist-container').html('');
                checklist.forEach(item => {
                    appendChecklistRow(item.description, item.isCompleted, item.id);
                });

                const canEdit = btn.canEdit;
                const isEditable = canEdit === "true";

                $('#editKanbanModal .modal-footer').toggle(isEditable);
                $('#btn-add-checklist').toggle(isEditable);
                $('.btn-remove-checklist').toggle(isEditable);

                $('#editKanbanModal').find('input, select, textarea, button').each(function () {
                    const $el = $(this);
                    if ($el.attr('data-dismiss') === 'modal') return;

                    if ($el.is('input') || $el.is('textarea') || $el.is('select')) {
                        $el.prop('readonly', !isEditable);
                        $el.prop('disabled', !isEditable);
                    }

                    if ($el.is('button')) {
                        $el.prop('disabled', !isEditable);
                    }
                });
            });

            function appendChecklistRow(description = '', isCompleted = false, id = null) {
                const html = `
                    <div class="form-group row align-items-center checklist-row" data-id="${id || ''}">
                        <div class="col-1 text-center">
                            <input type="checkbox" class="form-check-input checklist-checkbox" ${isCompleted ? 'checked' : ''}>
                        </div>
                        <div class="col-10">
                            <input type="text" class="form-control checklist-input" value="${description}" placeholder="Checklist description">
                        </div>
                        <div class="col-1 text-right">
                            <button type="button" class="btn btn-danger btn-sm btn-remove-checklist">
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `;
                $('#checklist-container').append(html);
            }

            $('#btn-add-checklist').on('click', () => {
                appendChecklistRow();
            });

            $('#checklist-container').on('click', '.btn-remove-checklist', function () {
                $(this).closest('.checklist-row').remove();
            });

            $('#editKanbanValidation').on('submit', function (e) {
                e.preventDefault();

                const actionPlanId = $('#edit-ap-id').val();
                const currentChecklist = [];

                $('#checklist-container .checklist-row').each(function () {
                    const id = $(this).data('id');
                    const description = $(this).find('.checklist-input').val();
                    const isCompleted = $(this).find('.checklist-checkbox').prop('checked');
                    currentChecklist.push({ id, description, isCompleted });
                });

                // Grouping logic
                const added = currentChecklist.filter(x => !x.id);
                const updated = currentChecklist.filter(x => {
                    const original = initialChecklistData.find(y => y.id === x.id);
                    return original && (original.description !== x.description || original.isCompleted !== x.isCompleted);
                });
                const deleted = initialChecklistData.filter(x => !currentChecklist.find(y => y.id === x.id));

                // Create array of promises
                const addRequests = added.map(x =>
                    $.ajax({
                        url: 'http://sql-mvt-03/sprm/api/PlanManager/AddActionPlanChecklist',
                        method: 'POST',
                        contentType: 'application/json',
                        headers: { 'Authorization': 'Bearer ' + token },
                        data: JSON.stringify({
                            description: x.description,
                            isCompleted: x.isCompleted,
                            actionPlanId: parseInt(actionPlanId),
                            createdBy: userMaipark
                        })
                    })
                );

                const updateRequests = updated.map(x =>
                    $.ajax({
                        url: 'http://sql-mvt-03/sprm/api/PlanManager/UpdateActionPlanChecklist',
                        method: 'PUT',
                        contentType: 'application/json',
                        headers: { 'Authorization': 'Bearer ' + token },
                        data: JSON.stringify({
                            id: x.id,
                            description: x.description,
                            isCompleted: x.isCompleted,
                            lastUpdatedBy: userMaipark
                        })
                    })
                );

                const deleteRequests = deleted.map(x =>
                    $.ajax({
                        url: `http://sql-mvt-03/sprm/api/PlanManager/DeleteActionPlanChecklist?id=${x.id}&deletedBy=${userMaipark}`,
                        method: 'DELETE',
                        headers: { 'Authorization': 'Bearer ' + token }
                    })
                );

                // Wait until all requests are completed
                Promise.all([...addRequests, ...updateRequests, ...deleteRequests])
                    .then(() => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'All checklist changes have been successfully saved.',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            $('#editKanbanModal').modal('hide');
                            location.reload();
                        });
                    })
                    .catch(error => {
                        console.error(error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while saving the checklist changes.'
                        });
                    });
            });
        });

        function loadKanbanData() {
            $.ajax({
                url: "http://sql-mvt-03/sprm/api/PlanManager/GetKanban",
                method: "GET",
                contentType: 'application/json',
                headers: { 'Authorization': 'Bearer ' + token },
                success: function (response) {
                    if (response.success && response.data) {
                        // Enrich data: tambahkan canEdit ke setiap item
                        const dataPromises = response.data.map(item => {
                          return $.ajax({
                            url: 'http://sql-mvt-03/sprm/api/Lookup/GetEmployeeByUserMaipark',
                            method: 'GET',
                            data: { username: item.createdBy },
                            headers: { 'Authorization': 'Bearer ' + token }
                          }).then(res => {
                            return { ...item, canEdit: ((res.data.divId === employeeDataObj.divId && roleName == 'Dept Head') || (res.data.divId === employeeDataObj.divId && roleName == "Group Head") || roleName == 'Administrator' || item.assignment.includes(userMaipark)) };
                          }).catch(() => {
                            return { ...item, canEdit: false };
                          });
                        });

                        Promise.all(dataPromises).then(enrichedData => {
                            enrichedData.forEach(function (item) {
                                // Ambil kode bagian ke-2 dari codification
                                const code = item.codification?.split("/")[1];

                                // Tentukan target board berdasarkan code
                                let targetBoard = '';
                                switch (code) {
                                    case 'PRFT': targetBoard = '#kanban-prft'; break;
                                    case 'STNB': targetBoard = '#kanban-stnb'; break;
                                    case 'SDGS': targetBoard = '#kanban-sdgs'; break;
                                    case 'HCR':  targetBoard = '#kanban-hcr'; break;
                                    case 'IMPV': targetBoard = '#kanban-impv'; break;
                                    default: return; // Skip jika tidak cocok
                                }

                                // Hitung checklist
                                const totalChecklist = item.actionPlanChecklists.length;
                                const completedChecklist = item.actionPlanChecklists.filter(c => c.isCompleted).length;

                                // Format tanggal
                                let dueDateText = "To Be Determined";
                                if (item.dueDate) {
                                    const dueDate = new Date(item.dueDate);
                                    dueDateText = dueDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
                                }

                                const due = moment(item.dueDate);
                                const today = moment();
                                const daysDiff = due.diff(today, 'days', true);

                                let bgClass = 'bg-secondary';
                                if (daysDiff <= 0) {
                                    bgClass = 'bg-danger';
                                } else if (daysDiff <= 5) {
                                    bgClass = 'bg-warning';
                                } else if (daysDiff <= 14) {
                                    bgClass = 'bg-success';
                                }

                                // Buat HTML untuk avatar stack
                                let avatarStackHtml = "";
                                if (item.assignment && item.assignment.length > 0) {
                                    avatarStackHtml = `<div class="avatar-stack">`;
                                    item.assignment.forEach(person => {
                                        const initials = person.split('.').map(n => n[0].toUpperCase()).join('');
                                        avatarStackHtml += `
                                            <div class="avatar-small" data-name="${person}">
                                                ${initials}
                                            </div>`;
                                    });
                                    avatarStackHtml += `</div>`;
                                }

                                // Buat elemen kanban-item
                                const kanbanItem = `
                                    <div class="kanban-item">
                                        <a href="#" class="kanban-title">${item.title}</a>
                                        <div class="kanban-badges">
                                            <div class="kanban-badge ${bgClass} text-white">
                                                <i class="far fa-clock"></i>
                                                <span class="badge-text">${dueDateText}</span>
                                            </div>
                                            <div class="kanban-badge">
                                                <i class="far fa-check-square"></i>
                                                <span class="badge-text">${completedChecklist}/${totalChecklist}</span>
                                            </div>
                                        </div>
                                        ${avatarStackHtml}
                                        <button
                                            class="btn btn-sm btn-edit-kanban kanban-edit"
                                            data-apid="${item.id}"
                                            data-checklist='${JSON.stringify(item.actionPlanChecklists)}'
                                            data-can-edit="${item.canEdit}"
                                            data-toggle="modal"
                                            data-target="#editKanbanModal"
                                            data-placement="top"
                                            title="Show Action Plan Detail"
                                        >
                                            <i class="fas fa-search"></i>
                                        </button>
                                    </div>
                                `;

                                // Masukkan ke dalam main dari board yang sesuai
                                $(targetBoard).find('main').append(kanbanItem);
                            });
                        });
                    } else {
                        alert("Gagal mengambil data Kanban.");
                    }
                },
                error: function (err) {
                    console.error("AJAX error:", err);
                    alert("Terjadi kesalahan saat mengambil data Kanban.");
                }
            });
        }

        // Hover handler
        var boardDemo = {
            init: function () {
                this.bindUIActions();
            },
            bindUIActions: function () {
                this.handleBoardStyle();
                this.handleAvatarStyle();
            },
            handleBoardStyle: function () {
                $(document).on('mouseenter mouseleave', '.kanban-board-header', function (e) {
                    var isHover = e.type === 'mouseenter';
                    $(this).parent().toggleClass('hover', isHover);
                });
            },
            handleAvatarStyle: function () {
                // Hover avatar stack
                $(document).on('mouseenter', '.avatar-small', function() {
                    $(this).css('z-index', '3');
                    $(this).siblings().css('z-index', '1');
                }).on('mouseleave', '.avatar-small', function() {
                    $(this).css('z-index', '1');
                });
            }
        };

        boardDemo.init();
    </script>
}